// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- USER APP
enum SYSTEM_ROLE {
  owner
  moderator
  user
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clerkUserId String?  @unique
  Profile     Profile?
}

// ---

// --- PROFILE APP
model Album {
  id        String    @id @default(cuid())
  name      String
  order     Int
  isPrivate Boolean   @default(false)
  profileId String
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  pictures  Picture[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([profileId, order])
  @@index([createdAt])
  @@index([updatedAt])
}

model Picture {
  id        String   @id @default(cuid())
  url       String
  order     Int
  albumId   String?
  album     Album?   @relation(fields: [albumId], references: [id], onDelete: Cascade)
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([albumId, order])
}

enum GENDER {
  male
  cismale
  transmale
  female
  cisfemale
  transfemale
  nonbinary
}

model Gender {
  id       Int       @id @default(autoincrement())
  name     GENDER
  profiles Profile[]
}

enum PRONOUN {
  he_him_his
  she_her_hers
  they_them_theirs
  ze_hir_hirs
  ze_zir_zirs
  use_my_name
  ask_me
}

model Pronoun {
  id       Int       @id @default(autoincrement())
  name     PRONOUN
  profiles Profile[]
}

enum SEXUAL_ROLE {
  top
  bottom
  versatile
  vers_top
  vers_bottom
  side
}

model Profile {
  id            String       @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  date_of_birth DateTime?    @db.Date
  name          String?
  height        Float?
  weight        Float?
  sexRole       SEXUAL_ROLE?
  pictures      Picture[]
  albums        Album[]
  genders       Gender[]
  pronouns      Pronoun[]
  bio           String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([createdAt])
}

// ---
